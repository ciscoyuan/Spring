<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>

    <!-- 配置文件 -->
    <!--<properties resource="generator.properties"></properties> -->

    <context id="MysqlContext" targetRuntime="MyBatis3" defaultModelType="flat">

        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 由于beginningDelimiter和ending Delimiter的默认值为双引号(")，在Mysql中不能这么写，所以还要将这两个默认值改为`  -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
		
		<!-- 生成一个新的selectByExample方法，这个方法可以接收offset和limit参数，主要用来实现分页 -->
        <plugin type="com.finals.generator.component.PaginationPlugin"></plugin>
		<!-- 生成的代码去掉注释 -->
        <commentGenerator type="com.finals.generator.component.CommentGenerator">
            <property name="suppressAllComments" value="true" />
            <property name="suppressDate" value="true"/>
        </commentGenerator>
        
        <!-- 数据库连接 -->
        <jdbcConnection driverClass="${jdbc_driver}"
                        connectionURL="${jdbc_url}"
                        userId="${jdbc_username}"
                        password="${jdbc_password}" />
                        
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver type="com.finals.generator.component.TinyIntJavaTypeResolver">
            <property name="forceBigDecimals" value="false"/>
            <property name="tinyintAsInt" value="true"/>
        </javaTypeResolver>

        <!-- model生成 -->
        <javaModelGenerator targetPackage="${generator_javaModelGenerator_targetPackage}" targetProject="${targetProject_model}/src/main/java" />

        <!-- MapperXML生成 -->
        <sqlMapGenerator targetPackage="${generator_sqlMapGenerator_targetPackage}" targetProject="${targetProject_xml}/src/main/java" />

        <!-- Mapper接口生成 -->
        <!-- 
             type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
             type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
             type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <javaClientGenerator targetPackage="${generator_javaClientGenerator_targetPackage}" targetProject="${targetProject_mapper}/src/main/java" type="MIXEDMAPPER" />

        <!-- 需要映射的表 -->
        #foreach($table in $tables)
        <table tableName="$!table.table_name" domainObjectName="$!table.model_name">
            #if($jdbc_schema)
            <property name="runtimeSchema" value="${jdbc_schema}"/>
            #end
       		#if($table.model_primaryKey)
            <generatedKey column="$table.model_primaryKey" sqlStatement="MySql" identity="true" />
            #end
        </table>
        #end
    </context>
</generatorConfiguration>